'scopeName': 'source.tup'
'name': 'Tup'
'fileTypes': [
  'tup'
  'tup.config'
  'Tupfile'
]
'patterns': [
  {
    # Comments
    'match': '^\\s*#.*$'
    'name': 'comment.line.number-sign.tup'
  }
  {
    # If
    'match': '^\\s*(ifn?eq)\\s+(\\()(.*)(,)(.*)(\\))\\s*$'
    'captures':
      '1': 'name': 'keyword.control.tup'
      '2': 'name': 'keyword.control.tup'
      '3':
        'patterns': [
          {
            'include': '#expression'
          }
        ]
      '4': 'name': 'keyword.control.tup'
      '5':
        'patterns': [
          {
            'include': '#expression'
          }
        ]
      '6': 'name': 'keyword.control.tup'
  }
  {
    # Else and endif
    'match': '^\\s*(else|endif)\\s*$'
    'name': 'keyword.control.tup'
  }
  {
    # Include and preload
    'match': '^\\s*(include|preload)\\s+\\S+\\s*$'
    'captures':
      '1': 'name': 'keyword.control.tup'
  }
  {
    # Multiline Run
    'begin': '^\\s*(run)\\s+(?=.*\\\\$)'
    'end': '(?<![\\n\\\\])$'
    'beginCaptures':
      # Run
      '1': 'name': 'keyword.control.tup'
    'patterns': [
      {
        'match': '\\*'
        'name': 'string.regexp.tup'
      }
    ]
  }
  {
    # Run
    'match': '^\\s*(run)\\s+(.*)$'
    'captures':
      '1': 'name': 'keyword.control.tup'
      '2':
        'patterns': [
          {
            'match': '\\*'
            'name': 'string.regexp.tup'
          }
        ]
  }
  {
    # Error
    'match': '^\\s*(error)\\s+(.*)$'
    'captures':
      '1': 'name': 'keyword.control.tup'
      '2': 'name': 'string.unquoted.tup'
  }
  {
    # Varialbe references
    'match': '^\\s*(ifn?def|export)\\s+([^!=:+\\s]+)\\s*$'
    'captures':
      '1': 'name': 'keyword.control.tup'
      '2': 'name': 'entity.name.type.tup'
  }
  {
    # Tup standalone keywords
    'match': '^\\s*(include_rules|\\.gitignore)\\s*$'
    'name': 'constant.language.tup'
  }
  {
    # Variable assignment
    'match': '^\\s*(&?[^!=:+\\s]+)\\s*([:+]?=)\\s*(.*)$'
    'captures':
      '1': 'name': 'entity.name.type.tup'
      '2': 'name': 'keyword.control.tup'
      '3': 'patterns': [
        {
          'include': '#expression'
        }
      ]
  }
  # FIXME Multiline macro definitions will accept and parse bins. This can't be fixed easily, as the current multiline technique useses cascading rules, so changing the tail parse requires duplicating the cascade, at least partially.
  {
    # multiline !macro definition with order only
    'begin': '^\\s*(!\\w+)\\s*(=)\\s*(\\|)(?!>)(?=.*\\\\$)'
    'end': '(?<![\\n\\\\])$'
    'beginCaptures':
      # Macro name
      '1': 'name': 'entity.name.function.tup'
      # Equals
      '2': 'name': 'keyword.control.tup'
      # Pipe
      '3': 'name': 'keyword.control.tup'
    'patterns': [
      {
        # Inputs
        'include': '#ml-inputs'
      }
    ]
  }
  {
    # multiline !macro definition with order only
    'begin': '^\\s*(!\\w+)\\s*(=)\\s*(\\|>)(?=.*\\\\$)'
    'end': '(?<![\\n\\\\])$'
    'beginCaptures':
      # Macro name
      '1': 'name': 'entity.name.function.tup'
      # Equals
      '2': 'name': 'keyword.control.tup'
      # Pipe
      '3': 'name': 'keyword.control.tup'
    'patterns': [
      {
        # Inputs
        'include': '#ml-carat-flags'
      }
    ]
  }
  {
    # !macro definition
    'match': '^\\s*(!\\w+)\\s*(=)\\s*(.*?)(<\\w+>\\s*)?$'
    'captures':
      # Macro name
      '1': 'name': 'entity.name.function.tup'
      # Equals
      '2': 'name': 'keyword.control.tup'
      # Base tup expression
      '3':
        'patterns': [
          {
            'include': '#base-tup'
          }
        ]
      # Group
      '4': 'name': 'entity.name.type.tup'
  }
  {
    # Multiline colon rule
    'begin': '^\\s*(:)(\\s*foreach)?(?=.*\\\\$)'
    'end': '(?<![\\n\\\\])$'
    'beginCaptures':
      # Colon
      '1': 'name': 'keyword.control.tup'
      # Foreach
      '2': 'name': 'keyword.control.tup'
    'patterns': [
      {
        # Inputs
        'include': '#ml-order-only'
      }
    ]
  }
  {
    # Standard colon rule
    'match':
      '^\\s*(:)(\\s*foreach)?([^|]*)(\\|.*?)(\\s*[^>\\s]*<\\w+>)?(\\s*\\{\\w+\\})?\\s*$'
    'captures':
      # Colon
      '1': 'name': 'keyword.control.tup'
      # Foreach
      '2': 'name': 'keyword.control.tup'
      # Inputs
      '3':
        'patterns': [
          {
            'include': '#inputs'
          }
        ]
      # Base part of a tup expression
      '4':
        'patterns': [
          {
            'include': '#base-tup'
          }
        ]
      # Group
      '5': 'name': 'entity.name.type.tup'
      # Bin
      '6': 'name': 'entity.name.type.tup'
  }
]
'repository':
  'ml-order-only':
    'patterns': [
      {
        # Rest of pattern
        'begin': '(\\|(?!>))'
        'end': '(?<![\\n\\\\])$'
        'beginCaptures': '1': 'name': 'keyword.control.tup'
        'patterns': [
          {
            # Rest
            'include': '#ml-inputs'
          }
        ]
      }
      {
        'include': '#ml-inputs'
      }
      {
        # Input parser
        'include': '#inputs'
      }
    ]
  'ml-inputs':
    'patterns': [
      {
        # Rest of pattern
        'begin': '(\\|>)'
        'end': '(?<![\\n\\\\])$'
        'beginCaptures': '1': 'name': 'keyword.control.tup'
        'patterns': [
          {
            'include': '#ml-carat-flags'
          }
        ]
      }
      {
        # Input parser
        'include': '#inputs'
      }
      {
        'match': '\\|'
        'name': 'invalid.illegal.tup'
      }
    ]
  'ml-carat-flags':
    'patterns': [
      {
        'begin': '(\\^([cob]{0,3})(\\s+[^^]*)?\\^)'
        'end': '(?<![\\n\\\\])$'
        'beginCaptures':
          '1': 'name': 'string.unquoted.tup'
          '2': 'name': 'constant.language.tup'
          '3':
            'patterns': [
              {
                'include': '#expression'
              }
            ]
        'patterns': [
          {
            'include': '#ml-outputs'
          }
        ]
      }
      {
        'include': '#ml-outputs'
      }
    ]
  'ml-outputs':
    'patterns': [
      {
        # Rest of pattern
        'begin': '(\\|>)'
        'end': '(?<![\\n\\\\])$'
        'beginCaptures': '1': 'name': 'keyword.control.tup'
        'patterns': [
          {
            'include': '#output'
          }
          {
            'include': '#ml-order-only-outputs'
          }
          {
            'include': '#ml-group'
          }
          {
            'include': '#ml-bin'
          }
        ]
      }
      {
        # Superset of expression rules
        'include': '#expression'
      }
      {
        # Also allows bang macros
        'match': '!\\w+\\b'
        'name': 'entity.name.function.tup'
      }
    ]
  'ml-order-only-outputs':
    'patterns': [
      {
        'begin': '(\\|(?!>))'
        'end': '(?<![\\n\\\\])$'
        'beginCaptures': '1': 'name': 'keyword.control.tup'
        'patterns': [
          {
            'include': '#output'
          }
          {
            'include': '#ml-group'
          }
          {
            'include': '#ml-bin'
          }
          {
            'match': '\\|'
            'name': 'invalid.illegal.tup'
          }
        ]
      }
    ]
  'ml-group':
    'patterns': [
      'begin': '(<\\w+>)'
      'end': '(?<![\\n\\\\])$'
      'beginCaptures': '1': 'name': 'entity.name.type.tup'
      'patterns': [
        {
          'include': '#ml-bin'
        }
        {
          # This is okay
          'match': '\\\\$'
        }
        {
          # Everything else is an error
          'match': '\\S+'
          'name': 'invalid.illegal.tup'
        }
      ]
    ]
  'ml-bin':
    'patterns': [
      'begin': '(\\{\\w+\\})'
      'end': '(?<![\\n\\\\])$'
      'beginCaptures': '1': 'name': 'entity.name.type.tup'
      'patterns': [
        {
          # This is okay
          'match': '\\\\$'
        }
        {
          # Everything else is an error
          'match': '\\S+'
          'name': 'invalid.illegal.tup'
        }
      ]
    ]
  'inputs': # Inputs
    'patterns': [
      {
        # Bin
        'match': '\\{\\w+\\}'
        'name': 'entity.name.type.tup'
      }
      {
        # Groups
        'match': '[^|\\s]*<\\w+>'
        'name': 'entity.name.type'
      }
      {
        # Glob
        'match': '\\*'
        'name': 'string.regexp.tup'
      }
      {
        # Variables
        'include': '#variable-ref'
      }
    ]
  'base-tup': # Base expression
    'patterns': [
      {
        'match': '^((\\|)([^|]+))?(\\|>)(.*)(\\|>)([^|]*)((\\|)([^|]*))?$'
        'captures':
          # Pipe between inputs and order only inputs
          '2': 'name': 'keyword.control.tup'
          # Order only inputs
          '3':
            'patterns': [
              {
                'include': '#inputs'
              }
            ]
          # The |> between inputs and command
          '4': 'name': 'keyword.control.tup'
          # The full command
          '5':
            'patterns': [
              {
                'include': '#command'
              }
            ]
          # |> between command and output
          '6': 'name': 'keyword.control.tup'
          # Outputs
          '7':
            'patterns': [
              {
                # FIXME This will highlight %o in the output section
                'include': '#output'
              }
            ]
          # Pipe between outputs and extra outputs
          '9': 'name': 'keyword.control.tup'
          # Extra outputs
          '10':
            'patterns': [
              {
                'include': '#output'
              }
            ]
      }
    ]
  'command':
    'patterns': [
      {
        # Superset of expression rules
        'include': '#expression'
      }
      {
        # FIXME ^bbb^ Will also be highlighted
        'match': '^\\s*\\^([cob]{0,3})(\\s+[^^]*)?\\^'
        'name': 'string.unquoted.tup'
        'captures':
          '1': 'name': 'constant.language.tup'
          '2':
            'patterns': [
              {
                'include': '#expression'
              }
            ]
      }
      {
        # Also allows bang macros
        'match': '!\\w+\\b'
        'name': 'entity.name.function.tup'
      }
    ]
  'expression':
    'patterns': [
      {
        # Superset of output rules
        'include': '#output'
      }
      {
        # shell  expressions
        'match': '(\\\\\\\\\\$\\()([^\\)]*)(\\))'
        'name': 'string.interpolated.tup'
      }
      {
        # Backtick expressions
        'match': '(`)([^`]*)(`)'
        'name': 'string.interpolated.tup'
      }
      {
        # Double quoted strings
        'match': '(")(.*?)((?<!\\\\)")'
        'name': 'string.quoted.double'
        'captures':
          '2':
            'patterns': [
              {
                'match': '\\\\"'
                'name': 'constant.character.escape.tup'
              }
            ]
      }
      {
        # Single quoted strings
        'match': "(')(.*?)((?<!\\\\)')"
        'name': 'string.quoted.single'
        'captures':
          '2':
            'patterns': [
              {
                'match': "\\\\'"
                'name': 'constant.character.escape.tup'
              }
            ]
      }
    ]
  'output':
    'patterns': [
      {
        'include': '#variable-ref'
      }
      {
        'include': '#percents'
      }
    ]
  'percents':
    'patterns': [
      {
        # Percent escape patterns
        'match': '%[fbBeoOdg%]'
        'name': 'constant.language.tup'
      }
      {
        'match': '%<\\w+>'
        'name': 'constant.language.tup'
      }
      {
        # Invalid percent escapes
        'match': '%.'
        'name': 'invalid.illegal.tup'
      }
    ]
  'variable-ref':
    'patterns': [
      {
        # The three constant tup variables
        'match': '@\\(TUP_PLATFORM\\)|@\\(TUP_ARCH\\)|\\$\\(TUP_CWD\\)'
        'name': 'variable.language.tup'
      }
      {
        # References to $ or & variables in an expression
        'match': '[$&@]\\(([\\w%-]+)\\)'
        'name': 'entity.name.type.tup'
        'captures':
          '1':
            'patterns': [
              {
                'include': '#percents'
              }
            ]
      }
    ]
